#!/bin/bash

: <<'SECTIONS_EXPLAINED'
1:	This code is where a lot of the variables used later on
in the script are defined, it is also where the user is prompted to select
a Live ISO from ~/dpatches/distros

2:	This loop couldve been done better, it basically searches the entire Live ISO
for any file that can be identified as a squashfs, writes the file path to that squashfs to a map file inside the help folder,
and it creates a dummy of the squashfs to store the name of it, since you want to make sure that the name of the patch is identical to the original
so that the Live ISO doesnt freak out when you try to boot it up. The dummy is utilized in section 5.

3:	This small step is very important, you dont want to clutter the user's /mnt directory with garbage.

4:	This is the fun part, it searches ~/dpatches/MYSCRIPTS for any directory. The user is free to put anything inside those
directories. Then, it names the folder the patch will be made in.

5:	Stores dummy's name as a string, and changes the directory to the named folder.

6:	Interface, Function, and variable definitions for the API. So far I only have 1 variable and 2 functions defined,I may add more
depending on what people need out of the API. The documentation for this API is located in dpAPIdoc.

7:	This is the final step of the process where the squashfs-root is compiled into a new squashfs with the same name as the original, 
this is where the dummy comes into play. I feed that variable into the mksquashfs command. Then, I give instructions to the user on how
to patch the Live ISO they chose.
SECTIONS_EXPLAINED

solidcolortxt () {
printf "\033[$1m$2\033[0m"
}

#								SECTION 1:
clear;
solidcolortxt "32" "if this is empty, do Ctrl+c & place a distro ISO inside ~/dpatches/distros !\n\n";

PS3="Pick your poison )	"
DISTROS="$(ls ~/dpatches/distros | grep "\.iso$")";
select filename in ${DISTROS};
do
	li=${filename};
	case $li in
		'') printf "$0: Whoops, you messed up!\n\n" >&2; exit 1;;							# to keep the demons at bay
	esac
	break;
done

ISO=~/dpatches/distros/"$li"
name=$(basename "$li" .iso | tr -d '\-_0123456789')										# placeholder name for the patch folder, it has been truncated to hopefully make it easier to parse.
sudo mkdir /mnt/"$name";

mkdir ~/dpatches/patches/"$name";
mkdir ~/dpatches/patches/"$name"/squashfs-root;
mkdir ~/dpatches/patches/"$name"/help;

printf "\nmounting $ISO to /mnt/$name ...\n\n";
sudo mount $ISO /mnt/"$name";
printf "\nsearching for squashfs file in $li ...\n\n";




#								SECTION 2:
cd /mnt/"$name";
if [ "$(find . -type f -exec bash -c '[[ "$( file -b "$1" )" == *Squashfs* ]]' bash {} \; -print | wc -l)" = '1' ]; then	# Slow but necessary in some cases
find . -type f -exec bash -c '
	for pathname do
		case $( file -b "$pathname" ) in
			*Squashfs*) ;;
			*) continue
		esac
			dummy=$(basename $pathname)								# Stores name of clone as string
			printf "#" > ~/dpatches/patches/'$name'/"$dummy";					# Creates empty clone of the squashfs
			printf "\033[32mFound squashfs \033[31m"$pathname"\033[0m\033[32m, proceeding to unpack contents to ~/dpatches/patches/'$name'/squashfs-root . . .\033[0m\n";
			sudo unsquashfs -dest ~/dpatches/patches/'$name'/squashfs-root $pathname;
			cd ~/dpatches/patches/'$name';
			printf "$pathname" > ./help/map;
	done' bash {} +;
	else
	clear;
	solidcolortxt "31" "Apologies, it seems that this Live ISO is incompatible with this script.";
	echo unmounting /mnt/"$name";
	cd ~/dpatches;
	sudo rm -r ~/dpatches/patches/"$name";
	sudo umount /mnt/"$name";
	sleep 5;
	sudo rmdir /mnt/"$name";
	exit 1;
fi														# Some distros are unsupported, like: openSUSE, Chimera Linux, and Alpine. openSUSE has 7 squashfs for some reason, Chimera Linux uses EROFS instead of squashfs, and Alpine functions off of black magic. Unfortunately, I have no way of catching Alpine with this if statement.
cd ~/dpatches
echo unmounting /mnt/"$name" ...;
sudo umount /mnt/"$name";
sleep 5;




#								SECTION 3:
echo done;
sudo rmdir /mnt/"$name";
clear;




#								SECTION 4:
solidcolortxt "32" "pick which script pack from ~/dpatches/MYSCRIPTS to load into the home folder of ~/dpatches/patches/'name'/squashfs-root\n\n"

PACKS="$(ls -d ~/dpatches/MYSCRIPTS/*/)";
select packname in ${PACKS};
do
	sp=${packname};
	case $sp in
		'') printf "$0: Whoops, you messed up!" >&2; exit 1;;						# to keep the demons at bay
	esac
	break;
done

sudo cp -r $sp ~/dpatches/patches/"$name"/squashfs-root/home;							# home was the only folder that i found didnt break the iso when you modified it.
clear;
solidcolortxt "32" "Name your patch\n\n"
read -p 'NAME:	' NME;
mv ~/dpatches/patches/"$name" ~/dpatches/patches/"$NME";
printf "created patch ~/dpatches/patches/'$NME'\n\n"





#								SECTION 5:
sfs=$(find ~/dpatches/patches/"$NME"/ -maxdepth 1 -type f -printf "%f\n");					# Stores clone name as string
cd ~/dpatches/patches/"$NME";




#								SECTION 6:
export PATCHFS_extAPI="$HOME/dpatches/patches/$NME/squashfs-root"
export HLP_extAPI="$HOME/dpatches/patches/$NME/help"

scan () {
	if [ "$(sudo find $PATCHFS_extAPI/"$1" -name "$2" -printf "%f")" == "$2" ]; then
printf "P" > $HLP_extAPI/ext
hit=1
else
printf "\033[31mThis extension is incompatible because $2 was not found.\033[0m\n"				# stdout for error
printf "F" > $HLP_extAPI/ext
hit=0
fi
}

import () {
	printf "\n\033[33m$1 -> $2\033[0m\n"									# makes stdout prettier
	cat ./$1 | sudo tee -a $PATCHFS_extAPI/$2
}

insertDIR () {
	printf "\n\033[33m+$1\033[0m\n"										# makes stdout prettier
	sudo mkdir -pv $PATCHFS_extAPI/$1
}

extHEAD () {
	printf "\n\033[32m\t\t$1\033[0m\n\n"
}

export -f scan													# scan "folder" "file"
export -f import												# import "source" "destination"
export -f insertDIR												# insertDIR "name"
export -f extHEAD												# extHEAD "text"



while true; do													# entrypoint to the API
read -p "Apply extension? [Y/N]	" yn1
case $yn1 in
	[nN] )
		clear;
		solidcolortxt "31" "Skipping extension . . .\n\n";
		break;;
	[yY] )
		clear;
		solidcolortxt "32" "Select extension\n\n";
		
		epack="$(ls -d ~/dpatches/EXTENSIONS/*/)";
		select extension in ${epack};
		do
			ext=${extension};
			case $ext in
				'') printf "$0: Whoops, you messed up!\n\n" >&2; exit 1;;			# to keep the demons at bay
			esac
			break;
		done

		cd "$ext";
		bash ./extension.sh;										# Master file for the extension
		cd ~/dpatches/patches/"$NME";
		if [ "$(cat $HLP_extAPI/ext)" = 'P' ]; then
		solidcolortxt "32" "\nextension applied\n\n"
		else
		solidcolortxt "31" "\nfailed to apply extension\n\n"
		fi;;
	* )
		clear;
		printf "\nSorry, say that again?\n";
		continue;;
esac
done



#								SECTION 7:
sleep 5;
rm $sfs;
sudo mksquashfs squashfs-root $sfs; 										# Replaces clone with real squashfs
clear;
map=$(echo $(<~/dpatches/patches/"$NME"/help/map));
printf "\033[32mPatch has been created! Now all you need to do is replace \033[31m"$map"\033[0m\033[32m with \033[0m\033[35m"$sfs"\033[0m\033[32m inside \033[0m\033[31m"$li"\033[0m \033[32m\nusing a program like ISO Master\033[0m\n\n";
